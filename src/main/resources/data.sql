INSERT INTO Questions_Entity (question, answer) VALUES ('Różnica miedzy typami danych (złożony/prosty)', ' Typ prosty przechowuje wartość, typ złożony dziedziczy metody po klasie Object oraz ma przypisane dodatkowe metody');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jakie rzeczy dziedziczymy po klasie object', ' equals hashCode toString getClass');
INSERT INTO Questions_Entity (question, answer) VALUES ('Dlaczego mówimy ze wszystko w Javie jest obiektem', 'Ponieważ na każdym z elementów Java możemy określić jego: cechę (odróżnić od innych np po nazwie stan (czyli np aktualna wartość zmiennej) zachowanie (czyli metody wykonujące na nim operacje');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest paradygmat', ' Zbiór pojęć i teorii tworzących podstawy danej nauki ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jakie znamy paradygmaty programowania oop', ' PAHD Polimorfizm Abstrakcja Hermetyzacja Dziedziczenie');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest abstrakcja', ' Uproszczenie rzeczywistości (kodu) przy pomocy klas abstrakcyjnych oraz/lub interfejsów (uogólnienie problemu żeby łatwiej go zrozumieć) ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to hermetyzacja', ' Ograniczenie dostępu do danych elementów kodu (public protected private default) dzięki niej klasy pola metody mogą być widoczne dla innych lub nie ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to dziedziczenie', ' Dotyczy klas przyjmowanie zachowań (metod) oraz cech (pól) od klasy nadrzędnej (słówko extends) ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to polimorfizm', ' ożycie na wiele rożnych sposobów wielopostaciowość (jeżeli występuje relacja IS -A - można go ożyć) ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Polimorfizm w kontekście klas', 'służy do upraszczania kodu i zwiększania jego elastyczności zarówno kwadrat i trójkąt są figura wiec figura może skorzystać z polimorfizmu upraszczając kod (relacja IS -A ) trójkąt IS -A figura kwadrat IS -A figura ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Polimorfizm w kontekście metod', 'przesłonięcie metody - ożycie tej samej metody ale nadpisanie jej zawartości przeciążenie metody - zmienne zachowanie w zależności od podanych jej argumentów (typ i/lub ilość argumentów)');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest SOLID', ' Podstawowe założenia programowania obiektowego Single responsibility Open/closed Liskov substitution Interface segregation Dependency inversion');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest DRY', ' Dont Repeat Yourself (np podobny kod w wielu miejscach różne metody robiące to samo)');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jak spełniać DRY', ' Używanie metod interfejsów stałych ');
INSERT INTO Questions_Entity (question, answer) VALUES ('S - SOLID -wyjaśnij',' Single responsibility - klasa metoda moduł powinna być odpowiedzialna tylko za jedna rzecz (np jak użytkownik ma jednocześnie wprowadzić i swojego maila - to nie logiczne)');
INSERT INTO Questions_Entity (question, answer) VALUES ('O - SOLID -wyjaśnij',' Open/close klasy otwarte na rozszerzenie zamknięte na modyfikacje ');
INSERT INTO Questions_Entity (question, answer) VALUES ('L - SOLID -wyjaśnij',' Liskov subsitution (podstawienie Liskov) Klasa dziedzicząca możne się zmieniać ale nie możne miedz wpływu na działanie kodu który ozywa ');
INSERT INTO Questions_Entity (question, answer) VALUES ('I - SOLID -wyjaśnij ','Segregacja interfejsów interfejsy powinny być jak najmniejsze i konkretne (mniej metod wewnątrz powoduje lepsze dopasowanie do danego problemu)');
INSERT INTO Questions_Entity (question, answer) VALUES ('D - SOLID -wyjaśnij',' Odwrócenie zależności powiązania po miedzy klasami powinny wynikać z interfejsów (wysokopoziomowy kod nie powinien zależeć od niskopoziomowego) ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Czym jest stream', ' Sekwencja obiektów która pobiera dane np z kolekcji czy tablic obsługuje rożne metody przy których ożyciu otrzymujemy jakiś rrezultat (np filtrowanie danych)');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest VARARGS', 'metoda o zmiennej ilości argumentów składa się z argumentów (tablicy) która jest deklarowana dynamicznie przez użytkownika (jeżeli poda 2 argumenty VARARGS ma dwa argumenty');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co jest szybsze', ' stream czy pętla');
INSERT INTO Questions_Entity (question, answer) VALUES ('Dlaczego ozywamy streamów', ' Do zwiększenia czytelności kodu przyspieszenia pisania (krótszy kod) ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jakie znasz konstrukcje streamowe', ' filter- filtruje dane collect - przepakowuje strumień do np kolekcji map- zmiana do innego typu count- liczy ile jest el w strumieniu itd ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest watek', ' konstrukcja umożliwiająca podzielenie aplikacji celem szybszego działania (aplikacja wielowątkowa) ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest lambda', ' <parametry> -> {ciało wyrażenia} uproszczenie zapisu klasy anonimowej z zaimplementowanym interfejsem (jedna metoda) ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co doszło w Javie 8', ' Wyrażenia Lambda Streamy Date Time Functional interface Optional ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest watek i jaka jest różnica miedzy rdzeniem', ' watek to cześć rdzenia 1 rdzę = 2 watki Rdzeń - fizyczny procesor watek-logiczny procesor ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest współbieżność i co to jest równoległość', 'równoległość ozywa zwielokrotnionych rdzeni  współbieżność - przeplatanie zadań każde zadanie jest wykonywane po trochu ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest AOP', 'Aspect Oriented Programming grupuje podobne zagadnienia pod względem danych wielokryteriowy (aspektu) np bezpieczeństwo w aspekcie - dodanie produktu do koszyka bezpieczeństwo w aspekcie - logowanie do sklepu itp przy tworzeniu aplikacji ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Czym jest framework', 'Szkielet do budowy aplikacji dostarcza biblioteki oraz komponenty ogólnego przeznaczenia do wykonywania zadań Najczęściej jest to rozwiązanie wielu typowych problemów napotkanych');
INSERT INTO Questions_Entity (question, answer) VALUES ('Czym jest biblioteka', ' Zestaw klas i metod stworzonych do wykonywania danego zagania np SWING - tworzenie GUI ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest maven', ' Narzędzie do automatyzacji budowy projektu (aplikacji) zapewnia określoną strukturę programu i udostępnia przydatne wtyczki ułatwiające prace (przechowywane w POM) ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jakie znasz klasy dotyczące czasu', ' LocalDate LocalTime LocalDateTime Instant Duration Period ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jaka jest różnica miedzy period a duration', ' Duration jest reprezentowana w podstawowych jednostkach czas Period może być reprezentowana w miesiącach latach milleniach co powoduje ze mogą mieć inna faktyczna dlugosc ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest json', ' lekki format wymiany danych pomiędzy API ( relatywnie mało znaczników dodatkowych tak jak na przykład w XML) inspirowany zapisem z JS ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jakie znasz kolekcje', ' List (Linked Array) Set (Hash Tree LinkedHash) Map (Hash Tree LinkedHash) Queue (FIFO LIFO) ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jaka jest różnica miedzy setem i lista', ' Duplikaty L-tak S-nie Indeksy L-tak S-nie oba implementują interfejs Collection ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jaka jest różnica miedzy lista a mapa', ' Mapa - zawsze klucz i wartość jednemu kluczowi odpowiada jedna wartość Lista może zawierać powtórzenia a elementy listy posiadają indeksy implementuje interfejs Collection ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jaka jest różnica miedzy mapa a setem', ' Mapa - zawsze klucz i wartość jednemu kluczowi odpowiada jedna wartość Set to zestaw nie uporządkowanych i nie powtarzalnych się elementów implementuje interfejs Colection ');
INSERT INTO Questions_Entity (question, answer) VALUES ('jaka jest różnica miedzy LinkedList a arraylist', ' Array - szybszy dostęp swobodny wolniejsze wstawianie i usuwanie Linked efektywny w operacja wstawiania z i do środka oraz początek + koniec optymalny dostęp sekwencyjny ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest złożoność obliczeniowa', ' ilość zasobów niezbędnych do wykonania operacji przedstawiane jako Notacja Big O oraz theta ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jakie są złożoności operacji na tych zbiorach', ' +p i -p +k i -k Array= O(n) Linked= Theta (1) +s i -s Array= O(n) Linked= O(n) get Array= Theta (1) Linked= O(n) ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jaka jest różnica miedzy haszsetem a linkedhaszsetem a treesetem', 'Hashset - pozwala na null elementy losowo szybszy mniej metod TreeSet - nie pozwala na null elementy uporządkowane wolniejszy więcej metod LinkedHashSet - pozwalana null elementy uporządkowane tak jak były dodawane szybszy mniej metod ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Czym jest optional', ' Klasa generyczna wrapper która mówi nam ze dany obiekt może zwrócic null Zabezpiecza nas przed NullPointerException ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Po co powstał optional', ' Zabezpiecza przed wyjątkiem NullPointerException - Billion dollar mistake ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co trzeba nadpisać zęby w haszsecie obiekty były inaczej postrzegane', ' Przy nadpisywaniu HasSet należny nadpisać zarówno equals jak i hashCode bo dwa identyczne obiekty muszą zzwracać tan sam Hash ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest comparator i jaka jest różnica miedzy comparable', ' Comparable to interfejs umożliwiający sortowanie danych Comparator interfejs użyteczny w momencie gdy potrzebujemy zdefiniować rożne strategie sortowania ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest typ generyczny', ' szablon pozwala uniknąć nie potrzebnego rzutowania ponieważ zabezpiecza np listę przed wstawieniem zmiennej innego typu niż ten zadeklarowany jako Generyk (np Integer) ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest wyjątek', ' zaznacza ze coś podczas działania programu poszło nie tak i zatrzymuje aplikacje ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jakie znamy typy wyjątków', ' Errors Unchecked (RunTimeException) i Checked ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jaka jest różnica miedzy klasa abstr a interfejsem', 'klasa abstrakcyjna - można dziedziczyć tylko jedna dostarczać ciało metody o widoczności innej niż public Interfejs - można implementować wiele i rożne(elastyczność) dostarczać ciało metody o widoczności TYLKO public ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Podaj 4 algorytmy (najlepiej jak działają)', 'Wyszukiwanie binarne- w każdym kroku zmniejsza zbiór o polowe Sortowanie ba belkowe - porównywanie elementów parami mniejszy na lewo/większy na prawo');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest git', ' Rozproszony system kontroli wersji każdy możne posiadać pobrane cale repo na dysku bez dostępu do sieci ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest branch', ' nowopowstala cześć aplikacji która działa niezależnie do momentu merge z gałęzią master ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest scrum', ' Zwinne podejście do tworzenia nowego produktu którego dostarczanie odbywa siew małych przyrostach co ułatwia śledzenie postępu prac ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jakie znasz osoby w scrum', ' Product owner (posiada wizje i łączy business z klientem) development team scrum master (zarządza i usuwa przeszkody w realizacji zadań) ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jakie znasz wydarzenia w scrum', 'Sprint, Daily scrum Sprint review (przegląd inkrementu (co zostało dodane)update backlogu  (to do list) Sprint retrospective ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest kolejka', ' struktura danych gdzie: FIFO ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest stos', ' struktura danych gdzie: LIFO ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jakie znasz kategorie wzorców', ' konstrukcyjne strukturalne behawioralne ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Wymień 3 konstrukcyjne', ' Builder Factory Singleton ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Wymień 3 strukturalne', ' Adapter Dekorator Fasada ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Wymień 3 behawioralne', ' Obserwator Strategia Iterator ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest tdd', ' Test Driven Development Najpierw pisz testy potem aplikacje TDD wykonuje się etapowo ->pisz test > pisz fragment kodu > testuj go > popraw kod (gdy trzeba) > pisz kolejny test itd ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Z jakich korzystałeś bibliotek/frameworkow do testowania', ' Junit4 Mockito ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest jvm', 'JVM - Java Virtual Machine JRE- Java Runtime Enviornment (środowisko uruchomieni owe dla programów napisanych w Java) JDK-Java Development Kit (środowisko do programowania w Java');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jak działa GC', ' szuka obiektów które nie posiadają żadnych referencji a następnie je usuwa ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest baza danych', ' zbiór danych zapisanych zgodnie z przyjętymi regułami ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Czym jest hibernate', ' biblioteka do ORM (object Relational Mapping) służy do odwzorowywania obiektów na barze danych (odpowiada za wygodna komunikacje baza - aplikacja) ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Czym jest jpa', ' zbiór interfejsów do zaimplementowania po to aby umożliwić komunikacja z baza danych z poziomu kodu Java mapuje obiekty do bazy przy pomocy XML ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jpa i hibernate - różnice',' JPA to zbiór definicji Hibernate to biblioteka ' );
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to crud', ' skrót tego na co zazwyczaj pozwalając aplikacje Create Read Update Delete ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to acid', ' Zbiór zasad gwarantujących prawidłowe przetwarzanie transakcji w bazach danych Atomicity Consistency Isolation Durability (niepodzielność spójność izolacja trwałość ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jakie znasz typy join\', 'JOIN- łączy po części wspólnej LEFT JOIN (wszystko z tabeli 1 + tylko dopasowane z tabeli 2) RIGHT JOIN(wszystko z tabeli 2 + tylko dopasowane z tabeli 1) FULL JOIN (zwraca wszystko co uda się dopasować - obie tabele i cześć wspólna)');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest mongodb', 'System do zarządzania nierelacyjnymi bazami danych NoSQL Dane przechowywane SA to jako JSON ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest http', ' HyperText Tranfer Protocol to zadanie wysyłane serwerowi w zamian którego otrzymujemy dane (przeglądarka adres www strona internetowa w odpowiedzi) ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest hateoas', ' jest to tzw dojrzałe API które potrafi prowadzić po swojej strukturze przekazuje informacje gdzie użytkownik się znajduje i co możne zrobić z danymi REST ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jakie znasz typy http', ' GET - pobranie zasobów PUT - dodanie zasobu POST-wysłanie zasobów DELETE- skasowanie zasobów z serwera ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest cienki/gruby klient', ' Cienki klient (slaby sprzęt lub aplikacja WEB lub pulpit wirtualny) Gruby klient (mocny sprzęt zaawansowane aplikacje) ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest uri/url', ' URI - całkowity adres strony np : https://www google com/search');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest jsp angular', 'JSP- Java Servlet Pages - używany do tworzenia dynamicznych stron www (z dodatkowym panelem administracyjnym np do zmiany treści strony) Angular- framework od google do tworzenia Single Page application ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest skalowanie wertykalne/horyzontalne', ' Skalowanie wertykalne-modyfikacja poszczególnych komponentów serwera (CPU dysk RAM itp ) Horyzontalne - modyfikacja ilości serwerów cloud ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest transakcja', ' zbiór operacji jakie murza być dokonane musi spełniać regule ACID (A niepodzielność C spójność I izolacja D trwałość) składa siecz rozpoczęcia wykonania i zamknięcia ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest deadlock', ' sytuacja w której dwie rożne akcje czekają na siebie nawzajem wiec żadna nie możne się zakończyć ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest sekcja krytyczna', ' sekcja kodu współdzielonego który możne być wykorzystane jednocześnie przez co najwyżej jeden watek ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Kiedy w bazie robią się deadlocki','brak systemu dostępu do informacji (tylko jeden jednocześnie)');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to klasa abstrakcyjna', ' szkielet lub wymóg jakie murza spełnić klasy go implementujące (np posiadanie zadeklarowanych w nim metod) dodatkowa mogą zawierać implementacje metod ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to interfejs', ' szkielet lub wymóg jakie murza spełnić klasy go implementujące (np posiadanie zadeklarowanych w nim metod) ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to encja', ' wyobrażony lub rzeczywisty obiekt posiadające swoje cechy np osoba (imię nazwisko PESEL) pojazd (marka rejestracja) ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to KISS', ' Keep IT Simple Stupid- kod powinien być napisany tak aby dla każdego był łatwy do zrozumienia (jak najprostszy zapis bez udziwnię) ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to YAGNI', ' You Aint Gonna Need This - umieszczaj w kodzie tylko to co w danym momencie jest Ci potrzebne');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to TDA', ' Tell Dont Ask- ścisłe powiązana z hermetyzacja powinniśmy mówić klasom jakie SA ich obowiązki a nie pytać w jakim SA stanie ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to SCA', ' Separation of Concerns - wszytki klasy powinny być rozłączne nie powinny łączyć odpowiedzialności za jedno zadanie ');
INSERT INTO Questions_Entity (question, answer) VALUES ('Podaj różnice pomiędzy statement i prepared statement (JDBC)', 'PreparedStatement jest wykonywane szybciej. Parsuje, kompiluje i optymalizuje podstawione  a nadstawianie podstawia wartości do nich przypisane, wiec kontaktuje się z baza tylko raz');
