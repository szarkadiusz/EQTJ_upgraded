
INSERT INTO Questions_Entity (question, answer) VALUES ('roznica miedzy typami danych (zlozony/prosty)', ' Typ prosty przechowuje wartosc typ zlozony dziedziczy po metody klasie object oraz ma przypisane dodatkowe metody \r');
INSERT INTO Questions_Entity (question, answer) VALUES ('Jakie rzeczy dziedziczymy po klasie object', ' equals hashCode toString getClass \r');
INSERT INTO Questions_Entity (question, answer) VALUES ('dlaczego mowimy ze wszystko w javie jest obiektem', 'Poniewaz na kazdym z elementow Java mozemy okreslic jego: ceche (odroznic od innych np po nazwie stan (czyli np aktualna wartosc zmiennej) zachowanie (czyli metody wykonujace na nim operacje');
INSERT INTO Questions_Entity (question, answer) VALUES ('Co to jest paradygmat', ' Zbior pojec i teorii tworzacych podstawy danej nauki \r');
INSERT INTO Questions_Entity (question, answer) VALUES ('jakie znamy paradygmaty programowania oop', ' PAHD Polimorfim Abstrakcja Hermetyzacja Dziedziczenie \r');
INSERT INTO Questions_Entity (question, answer) VALUES ('co to jest abstrakcja', ' Uproszczenie rzeczywistosci (kodu) przy pomocy klas abstrakcyjnych oraz/lub interfejsow (uogolnienie problemu zeby latwiej go zrozumiec) \r');
INSERT INTO Questions_Entity (question, answer) VALUES ('co to hermetyzacja', ' Ograniczenie dostepu do danych elementow kodu (public protected private default) dzieki niej klasy pola metody moga byc widoczne dla innych lub nie \r');
INSERT INTO Questions_Entity (question, answer) VALUES ('co to dziedziczenie', ' Dotyczy klas przyjmowanie zachowan (metod) oraz cech (pol) od klasy nadrzednej (slowko extends) \r');
INSERT INTO Questions_Entity (question, answer) VALUES ('co to polimorfizm', ' uzycie na wiele roznych sposobow wielopostaciowosc (jezeli wystepuje relacja IS -A - mozna go uzyc) \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' polimorfizm w kontekscie klas', 'sluzy do upraszczenia kodu i zwiekszania jego elastycznosci zarowno kwadrat i trojkat sa figura wiec figura moze skorzystac z polimorfizmu upraszczajac kod (relacja IS -A ) trojkat IS -A figura kwadrat IS -A figura \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Polimorfizm w kontekscie metod', 'przesloniecie metody - uzycie tej samej metody ale nadpisanie jej zawartosci przeciazenie metody - zmienne zachowanie w zaleznosci od podanych jej argumentow (typ i/lub ilosc argumentow)');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to jest SOLID', ' Podstawowe zalozenia programowania obiektowego Single responsibility Open/closed Liskov substitution Interface segregation Dependency inversion \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to jest DRY', ' Dont Repeat Yourself (np podobny kod w wielu miejscach rozne metody robiace to samo)');
INSERT INTO Questions_Entity (question, answer) VALUES (' jak spelniac DRY', ' Uzywanie metod interfejsow stalych \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' S - SOLID -wyjasnij',' Single responsibility - klasa metoda modul powinna byc odpowiedzialna tylko za jedna rzecz (np jak uzytkownik ma jednoczesnie wprowadzic i swojego maila - to nie logiczne)');
INSERT INTO Questions_Entity (question, answer) VALUES (' O - SOLID -wyjasnij',' Open/close klasy otwarte na rozszerzenie zamkniete na modyfikacje ');
INSERT INTO Questions_Entity (question, answer) VALUES (' L - SOLID -wyjasnij',' Liskov subsitution (podstawienie Liskov) Klasa dziedziczaca moze sie zmieniac ale nie moze miec wplywu na dzialanie kodu ktory uzywa ');
INSERT INTO Questions_Entity (question, answer) VALUES (' I - SOLID -wyjasnij ','Segregacja interfejsow interfejsy powinny byc jak najmniejsze i konkretne (mniej metod wewnatrz powoduje lepsze dopasowanie do danego problemu)');
INSERT INTO Questions_Entity (question, answer) VALUES (' D - SOLID -wyjasnij',' Odwrocenie zaleznosci powiazania po miedzy klasami powinny wynikac z interfejsow (wysokopoziomowy kod nie powinien zalezec od niksopoziomowego) ');
INSERT INTO Questions_Entity (question, answer) VALUES (' Czym jest stream', ' Sekwencja obiektow ktora pobiera dane np z kolekcji czy tablic obsluguje rozne metody przy ktorych uzyciu otrzymujemy jais rezultact (np filtrowanie dantych)');
INSERT INTO Questions_Entity (question, answer) VALUES (' Co to jest VARARGS', 'metoda o zmiennej ilosci argumentow sklada sie z argumentow (tablicy) ktora jest deklarowana dynamicznie przez uzytkownika (jezeli poda 2 argumenty VARARGS ma dwa argumenty');
INSERT INTO Questions_Entity (question, answer) VALUES (' Co jest szybsze', ' stream czy petla');
INSERT INTO Questions_Entity (question, answer) VALUES (' Dlaczego uzywamy streamow', ' Do zwiekszenia czytelnosci kodu przyspieszenia pisania (krotszy kod) \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Jakie znasz konstrukcje streamowe', ' filter- filtruje dane collect - przepakowuje strumien do np kolekcji map- zmiana do innego typu count- liczy ile jest el w strumieniu itd \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Co to jest watek', ' konstrukcja umozliwiajaca podzielenie aplikacji celem szybszego dzialania (aplikacja wielowatkowa) \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Co to jest lambda', ' <parametry> -> {cialo wyrazenia} uproszczenie zapisu klasy anonimowej z zaimplementowaynm interfejsem (jedna metoda) \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Co doszlo w javie 8', ' Wyrazenia Lambda Streamy Date Time Functional interface Optional \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to jest watek i jaka jest roznica miedzy rdzeniem', ' watek to czesc rdzenia 1 rdzen = 2 watki Rdzen - fizyczny procesor watek-logiczny procesor \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to jest wspolbieznosc i co to jest rownoleglosc', 'rownoleglosc uzywa zwielokrotnionych rdzeni  wspolbieznosc - przeplatanie zadan kazde zadanie jest wykonywane po trochu ');
INSERT INTO Questions_Entity (question, answer) VALUES (' Co to jest AOP', 'Aspect Oriented Programming grupuje podobne zagadnienia pod wzgledem danych ktryteriow (aspektu) np bezpieczenstwo w aspekcie - dodanie produktu do koszyka bezpieczenstwo w aspekcie - logowanie do sklepu itp przy tworzeniu aplikacji ');
INSERT INTO Questions_Entity (question, answer) VALUES (' Czym jest framework', 'Szkielet do budowy aplikacji dostarcza biblioteki oraz komponenty ogolnego przeznaczenia do wykonywania zadan Najczesciej jest to rozwiazanie wielu typowych problemow napotkanych');
INSERT INTO Questions_Entity (question, answer) VALUES (' czym jest biblioteka', ' Zestaw klas i metod stworzonych do wykonywania danego zagania np SWING - tworzenie GUI \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to jest maven', ' Narzedzie do automatyzacji budowy projektu (aplikacji) zapewnia okreslona strukture programu i udostepnia przydatne wtyczki ulatwiajace prace (przechowywane w POM) \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Jakie znasz klasy dotyczace czasu', ' LocalDate LocalTime LocalDateTime Instant Duration Period \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' JAka jest roznica miedzy period a duration', ' Duration jest reprezentowana w podstwowych jednostkach czas Period moze byc reprezentowana w miesiacach latach milleniach co powoduje ze moga miec inna faktyczna dlugosc \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Co to jest json', ' lekki format wymiany danych pomiedzy API ( relatywnie malo znacznikow dodatwych tak jak na przyklad w XML) inspirowany zapisem z JS \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Jakie znasz kolekcje', ' List (Linked Array) Set (Hash Tree LinkedHash) Map (Hash Tree LinkedHash) Queue (FIFO LIFO) \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Jaka jest roznica miedzy setem i lista', ' Duplikaty L-tak S-nie Indeksy L-tak S-nie oba implementuja interfejs Collection \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Jaka jest roznica miedzy lista a mapa', ' Mapa - zawsze klucz i wartosc jednemu kloczowi odpowiada jedna wartosc Lista moze zawierac powtorzenia a elementy listy posiadaja indeksy implementuje interfejs Collection \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Jaka jest roznica miedzy mapa a setem', ' Mapa - zawsze klucz i wartosc jednemu kloczowi odpowiada jedna wartosc Set to zestaw nie upozadkowanych i nie powtarzacjacych sie elementow implementuje interfejs Colection \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' jaka jest roznica miedzy LinkedList a arraylist', ' Array - szybszy dostep swobodny wolniejsze wstawianie i usuwanie Linked efektywnyt w operacja wstawiania z i do srodka oraz poczatek + koniec optymalny dostep sekwencyjny \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to jest zlozonosc obliczeniowa', ' ilosc zasobow niezbednych do wykonania operacji przedstawiane jako Notacja Big O oraz theta \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' jakie sa zlozonosci operacji na tych zbiorach', ' +p i -p +k i -k Array= O(n) Linked= Theta (1) +s i -s Array= O(n) Linked= O(n) get Array= Theta (1) Linked= O(n) \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' jaka jest roznica miedzy haszsetem a linkedhaszsetem a treesetem', 'Hashset - pozwala na null elementy losowo szybszy mniej metod TreeSet - nie pozwala na null elementy uporzadkowane wolniejszy wiecej metod LinkedHashSet - pozwalana null elementy uporzadkowoane tak jak byly dodawane szybszy mniej metod \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Czym jest optional', ' Klasa generyczna wrapper ktora mowi nam ze dany obiekt moze zwrocic null Zabezpiecza nas przed NullPointerException \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Po co powstal optional', ' Zabezpiecza przed wyjatkiem NullPointerException - Billion dollar mistake \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' co trzeba nadpisac zeby w haszsecie obiekty byly inaczej postrzegane', ' Przy nadpisywaniu HasSet nalezy nadpisac zarowno equals jak i hashCode bo dwa identyczne obiekty usza zwracac tan sam Hash \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Co to jest comparator i jaka jest roznica miedzy comparable', ' Comparable to interfej umozliwiajacy sortowanie danych Comparator iterfejs uzyteczny w momencie gdy potrzebujemy zdefinipwac rozne strategie sortowania \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Co to jest typ generyczny', ' szablon pozwala uniknac nie potrzebnego rzutowania poniewaz zabezpiecza np liste przed wstawieniem zmiennej innego typu niz ten zadeklarowany jako Generyk (np Integer) \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to jest wyjatek', ' zaznacza ze cos podczas dzialania programu poszlo nie tak i zatrzymuje aplikacje \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Jakie znamy typy wyjatkow', ' Errors Unchecked (RunTimeException) i Checked \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' jaka jest roznica miedzy klasa abstr a interfejsem', 'klasa abstrakcyjna - mozna dziedziczyc tylko jedna dostarczac cialo metody o widocznosci innej niz public Interfejs - mozna implementowac wiele i rozne(elastycznosc) dostarczac cialo metody o widocznosci TYLKO public \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Podaj 4 algorytmy (najlepiej jak dzialaja)', 'Wyszukiwanie binarne- w kazdym kroku zmniejsza zbior o polowe Sortowanie babelkowe - porownywanie elementow parami mniejszy na lewo/wiekszy na prawo');
INSERT INTO Questions_Entity (question, answer) VALUES (' Co to jest git', ' Rozproszony system kontroli wersji kazdy moze posiadac pobrane cale repo na dysku bez dostepu do sieci \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Co to jest branch', ' nowopowstala czesc aplikacji ktora dziala niezaleznie do momentu merge z galezia master \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Co to jest scrum', ' Zwinne podejscie do tworzenia nowego produktu ktorego dostarczanie odbywa siew malych przyrostach co ulatwia sledzenie postepu prac \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' jakie znasz osoby w scrum', ' Product owner (posiada wizje i laczy business z klientem) development team scrum master (zarzadza i usuwa przeszkody w realizacji zadan) \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' jakie znasz wydarzenia w scrum', 'Sprint, Daily scrum Sprint review (przeglad inkrementu (co zostalo dodane)update backlogu  (to do list) Sprint retrospective ');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to jest kolejka', ' struktuta danych gdzie: FIFO \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to jest stos', ' struktuta danych gdzie: LIFO \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' jakei znasz kategorie wzorcow', ' konstrukcyjne strukturalne behawioralne \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' wymien 3 konstrukcyjne', ' Builder Factory Singleton \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' wymien 3 strukturalne', ' Adapter Dekorator Fasada \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' wymien 3 behawioralne', ' Obserwator Strategia Iterator \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Co to jest tdd', ' Test Driven Development Najpierw pisz testy potem aplikacje TDD wykonuje sie etapowo ->pisz test > pisz fragment kodu > testuj go > popraw kod (gdy trzeba) > pisz kolejny test itd \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' z jakich korzystales bibliotek/frameworkow do testowania', ' Junit4 Mockito \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Co to jest jvm', 'JVM - Java Virtual Machine JRE- Java Runtime Enviornment (srodowisko uruchomieniowe dla programow napisanych w Java) JDK-Java Development Kit (srodowisko do pragramowania w Java');
INSERT INTO Questions_Entity (question, answer) VALUES (' Jak dziala GC', ' szuka obiektow ktore nie posiadaja zadnych referencji a nastepnie je usuwa \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Co to jest baza danych', ' zbior danychzapisanych zgodnie z przyjetymi regulami \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' czym jest hibernate', ' biblioteka do ORM (object Relational Mapping) sluzy do odwzorowywania obiektow na baze danych (odpowiada za wygodna komunikacje baza - aplikacja) \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' czym jest jpa', ' zbior interfejsow do zaimplementowania po to aby umozliwic komunikacja z baza danych z poziomu kodu Java mapuje obiekty do bazy przy pomocy XML \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' jpa i hibernate - roznice JPA to zbior definicji Hibernate to biblioteka \r', '');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to crud', ' skrot tego na co zazwyczaj pozwalacja aplikacje Create Read Update Delete \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to acid', ' Zbior zasad gwarantujacych prawidlowe przetwarzanie transakcji w bazach danych Atomicity Consistency Isolation Durability (niepodzielnosc spojnosc izolacja trwalosc \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' jakie znasz typy join\', 'JOIN- laczy po czesci wspolnej LEFT JOIN (wszystko z tabeli 1 + tylko dopasowane z tabeli 2) RIGHT JOIN(wszystko z tabeli 2 + tylko dopasowane z tabeli 1) FULL JOIN (zwraca wszystko co uda sie dopasowac - obie tabele i czesc wspolna)');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to jest mongodb', 'System do zarzadzania nierelacyjnymi bazami danych NoSQL Dane przechowywane sa to jako JSON ');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to jest http', ' HyperText Tranfer Protocol to zadanie wysylane serwerowi w zamian ktorego otrzymujemy dane (przegladarka adres www strona internetowa w odpowiedzi) \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to jest hateoas', ' jest to tzw dojzale API ktore potrafi prowadzic po swojej strukturze przekazuje informacje gdzie uzytkownik sie znajduje i co moze zrobic z danymi REST \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' jakei znasz typy http', ' GET - pobranie zasobow PUT - dodanie zasobu POST-wyslanie zasobow DELETE- skasowanie zasobow z serwera \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to jest cienki/gruby klient', ' Cienki klient (slaby sprzet lub aplikacja WEB lub puplit wirutalny) Gruby klient (mocny sprzet zaawansowane aplikacje) \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to jest uri/url', ' URI - calkowity adres strony np : https://www google com/search');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to jest jsp angular', 'JSP- Java Servlet Pages - uzywany do tworzenia dynamicznych stron www (z dodatkowym panelem administracyjnym np do zmiany tresci strony) Angular- framework od google do tworzenia Single Page application \r,');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to jest skalowanie wertykalne/horyzontalne', ' Skalowanie wertykalne-modyfikacja poszczegolnych komponentow serwera (CPU dysk RAM itp ) Horyzontalne - modyfikacja ilosci serwerow cloud \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to jest transakcja', ' zbior operacji jakie musza byc dokonane musi spelniac regule ACID (A niepodzielnosc C spojnosc I izolacja D trwalosc) sklada siez rozpoczecia wykonania i zamkniecia \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Co to jest deadlock', ' sytuacja w ktorej dwie rozne akcje czekaja na siebie nawzajem wiec zadna nie moze sie zakonczyc \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to jest sekcja krytyczna', ' sekcja kodu wpoldzielonego ktory moze byc wykorzystane jednoczesnie przez co najwyzej jeden watek \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' kiedy w bazie robia sie deadlock','brak systemu dostepu do informacji (tylko jeden jednoczesnie)');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to klasa abstrakcyjna', ' szkielet lub wymog jakie musza spelnic klasy go implementujace (np posiadanie zadeklarowanych w nim metod) dodatkowa moga zawierac implementacje metod \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to interfejs', ' szkielet lub wymog jakie musza spelnic klasy go implementujace (np posiadanie zadeklarowanych w nim metod) \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to encja', ' wyobrazony lub rzeczywisty obiekt posiadajace swoje cechy np osoba (imie nazwisko PESEL) pojazd (marka rejestracja) \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to KISS', ' Keep It Simple Stupid- kod powinien byc napisany tak aby dla kazdego byl latwy do zrozumienia (jak najprostszy zapis bez udziwnien) \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to YAGNI', ' You Aint Gonna Need This - umiejszczaj w kodzie tylko to co w danym momencie jest Ci potrzebne');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to TDA', ' Tell Dont Ask- scisle powiazana z hermetyzacja powinnismy mowic klasom jakie sa ich obowiazki a nie pytac w jakim sa stanie ');
INSERT INTO Questions_Entity (question, answer) VALUES (' co to SCA', ' Separation of Concerns - wszsytkie klasy powinny byc rozlaczne nie powinny laczyc odpowiedzialnosci za jedno zadanie \r');
INSERT INTO Questions_Entity (question, answer) VALUES (' Podaj roznice pomiedzy statement i prepared statement (JDBC)', 'PreparesDstatement jest wykonywane szybciej. Parsuje, kompiluje i optymalizuje podstawione \ a nadstepnie podstawia wartosci do nich przypisane, wiec kontaktuje sie z baza tylko raz');
